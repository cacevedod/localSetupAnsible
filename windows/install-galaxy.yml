---
- name: Instalar herramientas en Windows y configurar
  hosts: localhost
  gather_facts: no

  vars:
    nvm_dir: "C:\\nvm"
    python_installed_path: "C:\\Python310"
    python_installed_executable: "C:\\Python310\\python.exe"

  tasks:
    - name: Instalar Git
      win_chocolatey:
        name: git
        state: present

    - name: Git branch por defecto main
      win_shell: git config --global init.defaultBranch main

    - name: Git Configurar correo y usuario globalmente
      win_shell: |
        git config --global user.email "cacevedod@devco.com.co"
        git config --global user.name "cacevedod"

    - name: Instalar Node.js usando Chocolatey
      win_chocolatey:
        name: nodejs-lts
        state: present

    - name: Instalar Python 3.10
      win_chocolatey:
        name: python
        version: 3.10.1
        state: present
      when: python_installed_executable not in ansible_facts.system_info.installed_programs

    - name: Agregar Python 3.10 al PATH
      win_environment:
        name: PATH
        value: "{{ python_installed_path }};{{ ansible_env.PATH }}"
        state: present
      when: python_installed_executable not in ansible_facts.system_info.environment.PATH

    - name: Instalar NVM para Windows
      win_chocolatey:
        name: nvm
        state: present

    - name: Instalar pyenv
      win_chocolatey:
        name: pyenv-win
        state: present

    - name: Instalar Java (OpenJDK)
      win_chocolatey:
        name: openjdk11
        state: present

    - name: Configurar JAVA_HOME
      win_environment:
        name: JAVA_HOME
        value: "C:\\Program Files\\OpenJDK\\openjdk-11"
        state: present

    - name: Establecer versión de Java por defecto
      win_shell: pyenv.bat global 11

    - name: Instalar Docker Desktop
      win_chocolatey:
        name: docker-desktop
        state: present

    - name: Esperar a que Docker Desktop se inicie
      win_wait_for:
        path: "C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe"
        state: started
        timeout: 300

    - name: Verificar si Google Chrome está instalado
      win_stat:
        path: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
      register: chrome_installed

    - name: Instalar Google Chrome
      win_chocolatey:
        name: googlechrome
        state: present
      when: not chrome_installed.stat.exists

    - name: Verificar si Visual Studio Code está instalado
      win_stat:
        path: "C:\\Program Files\\Microsoft VS Code\\Code.exe"
      register: vscode_installed

    - name: Instalar Visual Studio Code
      win_chocolatey:
        name: vscode
        state: present
      when: not vscode_installed.stat.exists

    - name: Instalar Appium 2
      win_shell: npm install -g appium@next

    - name: Instalar xcuitest
      win_shell: appium driver install xcuitest

    - name: Instalar uiautomator2
      win_shell: appium driver install uiautomator2

    - name: Verificar si Appium Inspector está instalado
      win_stat:
        path: "C:\\Program Files (x86)\\Appium\\Appium.exe"
      register: appium_inspector_installed

    - name: Instalar Appium Inspector
      win_chocolatey:
        name: appium
        state: present
      when: not appium_inspector_installed.stat.exists

    - name: Verificar si Minikube está instalado
      win_stat:
        path: "C:\\ProgramData\\chocolatey\\bin\\minikube.exe"
      register: minikube_installed

    - name: Instalar Minikube
      win_chocolatey:
        name: minikube
        state: present
      when: not minikube_installed.stat.exists

    - name: Verificar si AWS CLI está instalado
      win_shell: Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -eq "Amazon AWS CLI" }
      register: awscli_installed
      ignore_errors: true

    - name: Instalar AWS CLI utilizando Chocolatey
      win_chocolatey:
        name: awscli
        state: present
      when: awscli_installed.rc != 0

    - name: Verificar si warp está instalado
      win_stat:
        path: "C:\\Program Files\\Fusion Warp\\Warp.exe"
      register: warp_installed

    - name: Instalar warp
      win_chocolatey:
        name: warp
        state: present
      when: not warp_installed.stat.exists

    - name: Verificar si trello está instalado
      win_stat:
        path: "C:\\Program Files\\Trello\\trello.exe"
      register: trello_installed

    - name: Instalar trello
      win_chocolatey:
        name: trello
        state: present
      when: not trello_installed.stat.exists

    - name: Mostrar mensaje final
      debug:
        msg: "¡La instalación y configuración en Windows ha finalizado!"