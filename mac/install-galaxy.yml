---
- name: Instalar herramientas en Mac con Homebrew y configurar Oh My Zsh
  hosts: localhost
  gather_facts: false

  vars:
    jenv_path: ~/.jenv

  tasks:
    - name: Instalar Xcode Command Line Tools
      become: true
      command: xcode-select --install
      args:
        creates: /Library/Developer/CommandLineTools/usr/bin/git

    - name: Esperar a que se instalen las herramientas de línea de comandos de Xcode
      become: false
      pause:
        seconds: 10

    - name: Actualizar Homebrew
      become: false
      command: brew update
      changed_when: false

    - name: Git branch por defecto main
      become: false
      command: git config --global init.defaultBranch main

    - name: Git Configurar correo y usuario globalmente
      become: false
      shell: >
        git config --global user.email "cacevedod@devco.com.co" && git config --global user.name "cacevedod"

    - name: Crear alias global para 'git checkout' como 'git ck'
      become: false
      command: git config --global alias.ck checkout

    - name: Generar claves SSH
      become: false
      shell: >
        ssh-keygen -t rsa -b 4096 -C "cacevedod@devco.com.co" -f ~/.ssh/id_rsa -N ''
      args:
        creates: ~/.ssh/id_rsa

    - name: Mostrar clave pública SSH
      become: false
      command: cat ~/.ssh/id_rsa.pub
      register: public_key

    - name: Imprimir clave pública SSH
      debug:
        var: public_key.stdout

    - name: Verificar si Oh My Zsh está instalado
      become: false
      stat:
        path: ~/.oh-my-zsh
      register: ohmyzsh_installed

    - name: Instalar Oh My Zsh
      become: true
      shell: >
        sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      when: not ohmyzsh_installed.stat.exists

    - name: Configurar plugins en el archivo de perfil de Oh My Zsh (zsh)
      become: false
      lineinfile:
        dest: ~/.zshrc
        line: 'plugins=(git docker ansible terraform docker-compose brew)'
        state: present
      when: ohmyzsh_installed.stat.exists

    - name: Configurar plugins Tema Oh My Zsh (zsh)
      become: false
      lineinfile:
        dest: ~/.zshrc
        line: 'ZSH_THEME="jaischeema"'
        state: present
      when: ohmyzsh_installed.stat.exists

    - name: Configurar completado docker 1
      become: false
      lineinfile:
        dest: ~/.zshrc
        line: 'zstyle ":completion:*:*:docker:*" option-stacking yes'
        state: present
      when: ohmyzsh_installed.stat.exists

    - name: Configurar completado docker 2
      become: false
      lineinfile:
        dest: ~/.zshrc
        line: 'zstyle ":completion:*:*:docker-*:*" option-stacking yes'
        state: present
      when: ohmyzsh_installed.stat.exists

    - name: Cargar configuración zsh
      become: false
      shell: source ~/.zshrc

    - name: Instalar NVM
      become: false
      homebrew:
        name: nvm

    - name: Crear directorio ~/.nvm
      file:
        path: "~/.nvm"
        state: directory

    - name: Cargar NVM en (zsh)
      become: false
      lineinfile:
        dest: ~/.zshrc
        line: 'source ~/.nvm/nvm.sh'
        state: present

    - name: Cargar NVM en el archivo de perfil (zsh)
      become: false
      lineinfile:
        dest: ~/.zshrc
        line: 'export NVM_DIR="$HOME/.nvm"'
        state: present

    - name: Cargar NVM en el archivo de perfil (zsh) 2
      become: false
      lineinfile:
        dest: ~/.zshrc
        line: '  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm'
        state: present
    
    - name: Cargar NVM en el archivo de perfil (zsh) 3
      become: false
      lineinfile:
        dest: ~/.zshrc
        line: '  [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion'
        state: present

    - name: Instalar jEnv
      become: false
      homebrew:
        name: jenv

    - name: Configurar jEnv en el archivo de perfil (zsh)
      become: false
      lineinfile:
        dest: ~/.zshrc
        line: 'eval "$(jenv init -)"'
        state: present

    - name: Instalar Java (OpenJDK)
      become: false
      homebrew:
        name: openjdk@11

    - name: symlink Java (OpenJDK)
      become: true
      command: ln -sfn /opt/homebrew/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk

    - name: Configurar Java con jEnv
      become: false
      command: jenv add /Library/Java/JavaVirtualMachines/openjdk-11.jdk/Contents/Home
      args:
        creates: "{{ jenv_path }}/versions/11.0"

    - name: Configurar JAVA_HOME en el archivo de perfil (zsh)
      become: false
      lineinfile:
        dest: ~/.zshrc
        line: 'export JAVA_HOME="$HOME/.jenv/versions/$(jenv version-name)"'
        state: present

    - name: Establecer versión de Java por defecto
      become: false
      command: jenv global 11.0

    - name: Cargar configuración zsh
      become: false
      shell: source ~/.zshrc

    - name: Instalar Node.js usando Homebrew
      homebrew:
        name: node
        state: present

    - name: Instalar pyenv
      become: false
      homebrew:
        name: pyenv

    - name: Verificar si Python 3.10 ya está instalado
      find:
        paths: "$HOME/.pyenv/versions"
        patterns: "*"
      register: python_installed
    
    - name: instalar python 3
      become: false
      command: pyenv install 3.10
      when: python_installed.matched_files | length === 0

    - name: Establecer Python 3.10 como global con pyenv
      become: false
      command: pyenv global 3.10

    - name: Instalar Docker Desktop
      become: false
      homebrew_cask:
        name: docker

    - name: Reiniciar Docker Desktop
      become: false
      command: osascript -e 'quit app "Docker"'

    - name: Esperar a que Docker Desktop se reinicie
      become: false
      pause:
        minutes: 1

    - name: Verificar si Google Chrome está instalado
      become: false
      stat:
        path: /Applications/Google Chrome.app
      register: chrome_installed

    - name: Instalar Google Chrome
      become: false
      homebrew_cask:
        name: google-chrome
      when: not chrome_installed.stat.exists

    - name: Verificar si Visual Studio Code está instalado
      become: false
      stat:
        path: /Applications/Visual Studio Code.app
      register: vscode_installed

    - name: Instalar Visual Studio Code
      become: false
      homebrew_cask:
        name: visual-studio-code
      when: not vscode_installed.stat.exists

    - name: Verificar si IntelliJ IDEA Community Edition está instalado
      become: false
      stat:
        path: /Applications/IntelliJ IDEA CE.app
      register: intellij_installed

    - name: Instalar IntelliJ IDEA Community Edition
      become: false
      homebrew_cask:
        name: intellij-idea-ce
      when: not intellij_installed.stat.exists

    - name: Instalar Appium 2
      become: false
      command: npm install -g appium@next

    - name: Instalar xcuitest
      become: false
      command: appium driver install xcuitest
      ignore_errors: true

    - name: Instalar uiautomator2
      become: false
      command: appium driver install uiautomator2
      ignore_errors: true

    - name: Verificar si Appium Inspector está instalado
      become: false
      stat:
        path: /Applications/Appium Inspector.app
      register: appium_inspector_installed

    - name: Instalar Appium Inspector
      become: false
      homebrew_cask:
        name: appium-inspector
      when: not appium_inspector_installed.stat.exists

    - name: Verificar si Minikube está instalado
      become: false
      stat:
        path: /opt/homebrew/bin/minikube
      register: minikube_installed

    - name: Instalar Minikube
      become: false
      command: brew install minikube
      when: not minikube_installed.stat.exists

    - name: Verificar si AWS CLI está instalado
      become: false
      shell: brew list | grep -w "awscli"
      register: awscli_installed
      ignore_errors: true

    - name: Instalar AWS CLI utilizando Homebrew
      become: true
      community.general.homebrew:
        name: awscli
        state: latest
      when: awscli_installed.rc != 0

    - name: Verificar si warp está instalado
      become: false
      stat:
        path: /Applications/Warp.app
      register: warp_installed

    - name: Instalar warp
      become: false
      homebrew_cask:
        name: warp
      when: not warp_installed.stat.exists

    - name: Verificar si androidStudio está instalado
      become: false
      stat:
        path: /Applications/Android Studio.app
      register: android_installed

    - name: Instalar Android Studio
      become: false
      homebrew_cask:
        name: android-studio
      when: not android_installed.stat.exists

    - name: Verificar si postman está instalado
      become: false
      stat:
        path: /Applications/Postman.app
      register: postman_installed

    - name: Instalar postman
      become: false
      homebrew_cask:
        name: postman
      when: not postman_installed.stat.exists

    # herramienta para instalar cosas de la tienda mac desde comandos
    - name: Instalar mas
      become: false
      homebrew:
        name: mas

    - name: Verificar si trello está instalado
      become: false
      stat:
        path: /Applications/Trello.app
      register: trello_installed

    - name: Instalar trello
      become: false
      command: mas lucky trello
      when: not trello_installed.stat.exists

    - name: Cargar configuración zsh después de configurar
      become: false
      shell: source ~/.zshrc

    - name: Mostrar mensaje final
      debug:
        msg: "¡La instalación y configuración en Mac ha finalizado!"

