- name: Instalar herramientas en Linux con APT y configurar Zsh
  hosts: localhost
  gather_facts: false

  vars:
    jenv_path: /root/.jenv
    userGit: cacevedod
    emailGit: cacevedod@devco.com.co

  tasks:
    - name: Instalar paquetes necesarios
      become: true
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - git
        - curl
        - wget
        - unzip
        - software-properties-common
        - build-essential
        - zlib1g-dev
        - libffi-dev
        - libssl-dev
        - liblzma-dev
        - libbz2-dev
        - libreadline-dev
        - libsqlite3-dev
        - apt-transport-https
        - snapd

    - name: Actualizar paquetes
      become: true
      apt:
        update_cache: yes
      changed_when: false

    - name: Git branch por defecto main
      become: false
      command: git config --global init.defaultBranch main

    - name: Git Configurar correo y usuario globalmente
      become: false
      shell: >
        git config --global user.email "{{emailGit}}" && git config --global user.name "{{userGit}}"

    - name: Crear alias global para 'git checkout' como 'git ck'
      become: false
      command: git config --global alias.ck checkout

    - name: Generar claves SSH
      become: false
      shell: >
        ssh-keygen -t rsa -b 4096 -C "{{emailGit}}" -f $HOME/.ssh/id_rsa -N ''
      args:
        creates: $HOME/.ssh/id_rsa

    - name: Mostrar clave pública SSH
      become: false
      command: cat $HOME/.ssh/id_rsa.pub
      register: public_key

    - name: Verificar si Oh My Zsh está instalado
      become: true
      stat:
        path: /root/.oh-my-zsh
      register: ohmyzsh_installed

    - name: Instalar Oh My Zsh 1
      become: true
      shell: >
        apt install zsh -y
      when: not ohmyzsh_installed.stat.exists

    - name: Instalar Oh My Zsh 2
      become: true
      shell: >
        sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"
      when: not ohmyzsh_installed.stat.exists

    - name: Instalar Oh My Zsh 3
      become: true
      shell: >
        chsh -s `which zsh`
      when: not ohmyzsh_installed.stat.exists

    - name: Configurar plugins en el archivo de perfil de Oh My Zsh (zsh)
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: 'plugins=(git docker ansible terraform docker-compose brew)'
        state: present
      when: ohmyzsh_installed.stat.exists

    - name: Configurar plugins Tema Oh My Zsh (zsh)
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: 'ZSH_THEME="jaischeema"'
        state: present
      when: ohmyzsh_installed.stat.exists

    - name: Configurar completado docker 1
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: 'zstyle ":completion:*:*:docker:*" option-stacking yes'
        state: present
      when: ohmyzsh_installed.stat.exists

    - name: Configurar completado docker 2
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: 'zstyle ":completion:*:*:docker-*:*" option-stacking yes'
        state: present
      when: ohmyzsh_installed.stat.exists

    - name: Cargar configuración zsh
      become: true
      shell: source /root/.zshrc

    - name: Verificar si NVM está instalado
      become: true
      stat:
        path: /root/.nvm
      register: nvm_installed

    - name: Instalar NVM
      become: true
      shell: curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
      when: not nvm_installed.stat.exists

    - name: Cargar NVM en el archivo de perfil (zsh)
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: 'export NVM_DIR="/root/.nvm"'
        state: present

    - name: Cargar NVM en el archivo de perfil (zsh) 2
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm'
        state: present
      
    - name: Cargar NVM en el archivo de perfil (zsh) 3
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion'
        state: present

    - name: Verificar si jenv está instalado
      become: true
      stat:
        path: "{{jenv_path}}"
      register: jenv_installed

    - name: Instalar jEnv
      become: true
      shell: git clone https://github.com/jenv/jenv.git {{jenv_path}}
      when: not jenv_installed.stat.exists

    - name: Configurar jEnv en el archivo de perfil (zsh)
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: 'export PATH="{{jenv_path}}/bin:$PATH"'
        state: present

    - name: Configurar jEnv en el archivo de perfil (zsh) 2
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: 'eval "$(jenv init -)"'
        state: present

    - name: Instalar Java (OpenJDK)
      become: true
      apt:
        name: openjdk-11-jdk
        state: present

    - name: Configurar JAVA_HOME en el archivo de perfil (zsh)
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: 'export JAVA_HOME="{{jenv_path}}/versions/$(jenv version-name)"'
        state: present

    - name: Verificar si pyenv está instalado
      become: true
      stat:
        path: /root/.pyenv
      register: pyenv_installed

    - name: Instalar pyenv
      become: true
      shell: curl https://pyenv.run | bash
      when: not pyenv_installed.stat.exists

    - name: Configurar pyenv en el archivo de perfil (zsh)
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: 'export PATH="/root/.pyenv/bin:$PATH"'
        state: present

    - name: Configurar pyenv en el archivo de perfil (zsh) 2
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: 'eval "$(pyenv init --path)"'
        state: present

    - name: Configurar pyenv en el archivo de perfil (zsh) 3
      become: true
      lineinfile:
        dest: /root/.zshrc
        line: 'eval "$(pyenv virtualenv-init -)"'
        state: present

    - name: Cargar configuración zsh
      become: true
      shell: source /root/.zshrc

    - name: Configurar Java con jEnv
      become: false
      command: jenv add /usr/lib/jvm/java-11-openjdk-arm64/
      args:
        creates: "{{ jenv_path }}/versions/11.0"

    - name: Establecer versión de Java por defecto
      become: false
      command: jenv global 11.0

    - name: Cargar NVM en el shell
      become: true
      shell: . /root/.nvm/nvm.sh

    - name: Verificar si node ya está instalado
      become: true
      stat:
        path: /root/.nvm/versions/node
      register: node_installed

    - name: Instalar Node.js usando NVM
      become: true
      shell: nvm install node
      when: not node_installed.stat.exists

    - name: Actualizar pyenv
      become: true
      shell: pyenv update
      when: pyenv_installed.stat.exists
    
    - name: Verificar si Python 3.10 ya está instalado
      become: true
      find:
        paths: "/root/.pyenv/versions"
        file_type: directory
        recurse: no
      register: python_installed

    - name: Mostrar los directorios encontrados
      debug:
        var: python_installed
    
    - name: Instalar Python 3.10
      become: false
      command: pyenv install 3.10
      when: python_installed.files | length == 0

    - name: Establecer Python 3.10 como global con pyenv
      become: false
      command: pyenv global 3.10

    - name: Instalar Docker
      become: true
      apt:
        name: docker.io
        state: present

    - name: Instalar neovim
      become: true
      apt:
        name: neovim
        state: present

    - name: Verificar si Visual Studio Code está instalado
      become: false
      stat:
        path: /usr/share/code
      register: vscode_installed

    - name: Instalar Visual Studio Code
      become: true
      snap:
        name: code
        channel: stable
        classic: yes
      when: not vscode_installed.stat.exists

    - name: Instalar Appium 2
      become: false
      command: npm install -g appium@next

    - name: Instalar xcuitest
      become: false
      command: appium driver install xcuitest
      ignore_errors: true

    - name: Instalar uiautomator2
      become: false
      command: appium driver install uiautomator2
      ignore_errors: true

    - name: Instalar Appium Inspector
      become: true
      apt:
        name: appium-desktop
        state: present

    - name: Verificar si Minikube está instalado
      become: false
      stat:
        path: /usr/local/bin/minikube
      register: minikube_installed

    - name: Instalar Minikube
      become: true
      apt:
        name: minikube
        state: present
      when: not minikube_installed.stat.exists

    - name: Verificar si AWS CLI está instalado
      become: false
      command: aws --version
      register: awscli_installed
      ignore_errors: true

    - name: Instalar AWS CLI
      become: true
      apt:
        name: aws-cli
        state: present
      when: awscli_installed.rc != 0

    - name: Verificar si Android Studio está instalado
      become: false
      stat:
        path: /opt/android-studio/bin/studio.sh
      register: android_installed

    - name: Instalar Android Studio
      become: true
      snap:
        name: android-studio
        classic: yes
      when: not android_installed.stat.exists

    - name: Verificar si Postman está instalado
      become: false
      stat:
        path: /opt/Postman/Postman
      register: postman_installed

    - name: Instalar Postman
      become: true
      snap:
        name: postman
        classic: yes
      when: not postman_installed.stat.exists

    - name: Verificar si Trello está instalado
      become: false
      stat:
        path: /usr/local/bin/trello
      register: trello_installed

    - name: Instalar Trello
      become: true
      snap:
        name: Trello Desktop
        classic: yes
      when: not trello_installed.stat.exists


    - name: Cargar configuración zsh despues de configurar
      become: false
      shell: source $HOME/.zshrc

    - name: Mostrar mensaje final
      debug:
        msg: "¡La instalación y configuración en Linux ha finalizado!"
